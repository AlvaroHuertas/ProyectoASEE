package com.unex.proyectoasee_nogymmembership.Repository;

import android.content.Context;
import android.util.Log;

import com.unex.proyectoasee_nogymmembership.Models.Exercise;
import com.unex.proyectoasee_nogymmembership.Models.ExerciseList;
import com.unex.proyectoasee_nogymmembership.Models.Routine;
import com.unex.proyectoasee_nogymmembership.Networking.NetworkingAndroidHttpClientJSON;
import com.unex.proyectoasee_nogymmembership.RoomDB.AppDataBase;

import java.util.ArrayList;
import java.util.List;

public class AppRepository {

    private static AppRepository instance;

    private static final String TAG = "AppRepository";

    /**
     * Instance of the database Room manager. It is going to manage all the local data
     */
    private AppDataBase appDB;

    /**
     * Instance of the API manage. It is going to manage all the data from web resources.
     */
    private NetworkingAndroidHttpClientJSON appApi;

    /**
     * Private constructor of AppRepository class. Its a must in a singleton pattern.
     * @param c Activity context from where we are instantiating the repository
     */
    private AppRepository(Context c){
        appDB = AppDataBase.getDataBase(c);
        appApi = new NetworkingAndroidHttpClientJSON();
    }

    /**
     * Singleton main class. Allow us to work with just one instance of the repository.
     * @param c Activity context from where we are instantiating the repository
     * @return Instance of repository
     */
    public static AppRepository getInstance(Context c){
        if(instance == null){
            instance = new AppRepository(c.getApplicationContext());
        }
        return instance;
    }

    /**
     * GET all the exercises from the API
     * @return List containing all the exercises from the API
     */
    public List<Exercise> getExercisesFromApi(){
        List<Exercise> exercises = new ArrayList<>();
        if(appApi.getExerciseList() != null) {
            exercises = appApi.getExerciseList().getElements();

            Log.v(TAG, "Getting exercises from the API");
            for (Exercise e : exercises) {
                Log.v(TAG, e.getName());
            }
        }
        return exercises;
    }

    /**
     * GET one exercise filtered by its id
     * @param id Id of the exercise
     * @return The exercise
     */
    public Exercise getExercise(int id,int rid){
        Exercise e = appDB.exerciseDAO().getExercise(id,rid);
        return e;
    }

    /**
     * GET all the routines stored in the database
     * @return List of routines currently stored in database
     */
    public List<Routine> getAllRoutines() {
        List<Routine> items = appDB.routineDAO().getAll();
        return items;
    }

    /**
     * Add a new routine to the database
     * @param routine Item we are going to add
     * @return Return the id autogenerated for the new routine
     */
    public long addRoutine(Routine routine) {
        long id = appDB.routineDAO().insert(routine);
        return id;
    }

    /**
     * Update attributes of a certain routine
     * @param routine Routine we are going to update
     */
    public void updateRoutine(Routine routine) {
        appDB.routineDAO().updateStatus(routine);
    }

    /**
     * Return a list with all the exercises belonging to one routine
     * @param id Id of the routine that contains the exercises
     * @return List of exercises from the routine
     */
    public List<Exercise> getAllExercisesById(long id) {
        List<Exercise> e = appDB.exerciseDAO().getExercisesByRoutineId(id);
        return e;
    }

    /**
     * GET a certain routine
     * @param id Id of the routine
     * @return Routine that we are looking for
     */
    public Routine getRoutine(int id) {
        Routine r = appDB.routineDAO().getRoutine(id);
        return r;
    }

    /**
     * Deletes a routine from the database
     * @param routine Routine we are going to delete
     */
    public void deleteRoutine(Routine routine) {
        appDB.routineDAO().deleteRoutines(routine);
    }

    /**
     * Deletes a routine from the database
     * @param exercise Exercise we are going to delete
     */
    public void deleteExercise(Exercise exercise) {
        appDB.exerciseDAO().deleteExercises(exercise);
    }

    /**
     * GET an exercise that its already added to a certain routine
     * @param id_ex Id of the exercise
     * @param id_rou Id of the routine
     * @return Exercise we are looking for
     */
    public Exercise getExerciseInRoutine(int id_ex, int id_rou) {
        Exercise exercise=appDB.exerciseDAO().getExercise((int)id_ex,(int)id_rou);
        return exercise;
    }

    public void addExercise(Exercise exerciseToInsert) {
        appDB.exerciseDAO().insert(exerciseToInsert);
    }

}
